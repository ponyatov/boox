%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }		/* use universal bI abstract type */
%token <o> SYM STR NUM			/* symbol 'string' number */
%token <o> LB RB LQ RQ LC RC	/* brackets: () [] {} */
%token <o> ADD SUB MUL DIV POW	/* arithmetic operators: + - * / ^ */
%token <o> EQ AT TILD COLON		/* bi specific operators: = @ ~ : */
%token <o> SCOLON GR LS
%type <o> ex scalar				/* expression scalar */
%type <o> operator
%%
REPL : | REPL ex { cout << $2->dump(); } ;
scalar : SYM | STR | NUM ;
ex : 
	 ex ex					{ $$=$1; $$->push($2); }
	| scalar | operator
	| LB ex RB				{ $$=new Sym("()"); $$->push($2); }
	| LB  RB				{ $$=new Sym("()"); }
	| LQ ex RQ				{ $$=new Sym("[]"); $$->push($2); }
	| LC ex RC				{ $$=new Sym("{}"); $$->push($2); }
;
operator :
	ADD | SUB | MUL | DIV | POW
	| EQ | AT | TILD | COLON
	| SCOLON | GR | LS
;   
%%